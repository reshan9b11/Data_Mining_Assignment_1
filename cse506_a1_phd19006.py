# -*- coding: utf-8 -*-
"""CSE506_A1_PhD19006_MT20029

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TXzxaIrLYqnQfdwuaycyoryyUa8X7ne0
"""

# This is a sample Python script.
import sys
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json
from datetime import datetime
from datetime import date, timedelta
import matplotlib.dates as mdates


def dataPre(json_file_path, start_date, end_date):
    with open(json_file_path) as f:
        states_daily = json.load(f)

    # Preparing Data Frame
    # Getting Columns
    columnNames = list(states_daily['states_daily'][0].keys())
    len(states_daily['states_daily'])
    # Getting Each Instanes
    rows = [list(states_daily['states_daily'][i].values()) for i in range(len(states_daily['states_daily']))]
    rowsArray = np.array(rows)
    dataframe = pd.DataFrame(data=rowsArray, columns=columnNames)

    # Preprocessing of Data
    arr = columnNames[0:]
    arr.remove('date')
    arr.remove('status')
    for item in arr:
        dataframe[item] = dataframe[item].astype(int)

    dataframe['date'] = pd.to_datetime(dataframe['date'])
    filterStatusConfirmed = dataframe.loc[dataframe['status'] == 'Confirmed']
    filterStatusRecovered = dataframe.loc[dataframe['status'] == 'Recovered']
    filterStatusDeceased = dataframe.loc[dataframe['status'] == 'Deceased']
    union_terr = ['dl', 'an', 'jk', 'la', 'dn', 'py', 'cg', 'ld', ]
    state = []
    for item in arr:
        if item in union_terr or item == 'un' or item == 'dd' or item == 'tt':
            continue
        state.append(item)
    return dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr, union_terr, state



def Q1_1(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    #marchToSept1_Confirmed these are just variable don't confused with name it is flexible to take ant date
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <= end_date)]
    confirmed_count=marchToSept1_Confirmed['tt'].sum()
    recovered_count=marchToSept1_Recovered['tt'].sum()
    deceased_count=marchToSept1_Deceased['tt'].sum()
    print('confirmed_count: ',confirmed_count, 'recovered_count: ',recovered_count, 'deceased_count: ',deceased_count)
    return confirmed_count, recovered_count, deceased_count


# second part

def Q1_2(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <= end_date)]

    # Answer1_2
    confirmed_count=marchToSept1_Confirmed['dl'].sum()
    recovered_count=marchToSept1_Recovered['dl'].sum()
    deceased_count=marchToSept1_Deceased['dl'].sum()
    print('confirmed_count: ',confirmed_count, 'recovered_count: ',recovered_count, 'deceased_count: ',deceased_count)
    return confirmed_count, recovered_count, deceased_count

    # third part


def Q1_3(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >=start_date) & (filterStatusConfirmed['date'] <=end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >=start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >=start_date) & (filterStatusDeceased['date'] <= end_date)]
    confirmed_count=marchToSept1_Confirmed['dl'].sum() + marchToSept1_Confirmed['mh'].sum()
    
    recovered_count=marchToSept1_Recovered['dl'].sum() + marchToSept1_Recovered['mh'].sum()
    
    deceased_count=marchToSept1_Deceased['dl'].sum() + marchToSept1_Deceased['mh'].sum()

    print('confirmed_count: ',confirmed_count, 'recovered_count: ',recovered_count, 'deceased_count: ',deceased_count)

    return confirmed_count, recovered_count, deceased_count

    # fourth part


def Q1_4(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >=start_date) & (filterStatusDeceased['date'] <= end_date)]

    # Answer 1_4#Answer1_3

    max1 = 0
    max2 = 0
    max3 = 0

    state_conf = ''
    state_rec = ''
    state_dec = ''
    for item in arr1:
        if item == 'tt' or item in union_terr1 or item == 'un':
            continue
        count_conf = marchToSept1_Confirmed[item].sum()
        count_rec = marchToSept1_Recovered[item].sum()
        count_dec = marchToSept1_Deceased[item].sum()
        if count_conf > max1:
            max1 = count_conf
            state_conf = item
        if count_rec > max2:
            max2 = count_rec
            state_rec = item
        if count_dec > max3:
            max3 = count_dec
            state_dec = item
    print('\nConfirmed ')
    print('Highest affected State is: ',state_conf)
    print('Highest affected State count is: ',max1)
    print('\nRecovered')
    print('Highest Recovered State is: ',state_rec)
    print('Highest Recovered State count is: ',max2)
    print('\nDeceased')
    print('Highest affected State is: ',state_dec)
    print('Highest affected State count is: ',max3)


# Fifth part

def Q1_5(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <= end_date)]

    # Answer 1_5
    min1 = float('inf')
    min2 = float('inf')
    min3 = float('inf')
    arr1.remove('dd')  # Daman and Diu will merge into Dadra and Nagar Haveli
    l_state_conf = ''
    l_state_rec = ''
    l_state_dec = ''
    for item in arr1:
        if item == 'tt' or item in union_terr1 or item == 'un':
            continue
        count_conf = marchToSept1_Confirmed[item].sum()
        count_rec = marchToSept1_Recovered[item].sum()
        count_dec = marchToSept1_Deceased[item].sum()
        if count_conf < min1:
            min1 = count_conf
            l_state_conf = item
        if count_rec < min2:
            min2 = count_rec
            l_state_rec = item
        if count_dec < min3:
            min3 = count_dec
            l_state_dec = item

    # print("Lowest Infected State is '{0}'' with total number of Confirmed cases {1}".format(l_state_conf, min1))
    # print("Lowest Recovered Person's State is '{0}'' with total number of Recoverd cases {1}".format(l_state_rec, min2))
    # print("Lowest Infected State is '{0}' with total number of Deac cases {1}".format(l_state_dec, min3))
    print('\nConfirmed ')
    print('Lowest affected State is: ',l_state_conf)
    print('Lowest affected State count is: ',min1)
    print('\nRecovered')
    print('Lowest Recovered State is: ',l_state_rec)
    print('Lowest Recovered State count is: ',min2)
    print('\nDeceased')
    print('Lowest affected State is: ',l_state_dec)
    print('Lowest affected State count is: ',min3)


# sixth Part


def Q1_6(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >=start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >=start_date) & (filterStatusDeceased['date'] <= end_date)]

    # Answer 1_6
    index_max_con = marchToSept1_Confirmed['dl'].idxmax()
    index_max_rec = marchToSept1_Recovered['dl'].idxmax()
    index_max_dec = marchToSept1_Deceased['dl'].idxmax()

    date_conf = marchToSept1_Confirmed.at[index_max_con, 'date']
    date_conf = date_conf.date()
    date_rec = marchToSept1_Recovered.at[index_max_rec, 'date']
    date_rec = date_rec.date()
    date_dec = marchToSept1_Deceased.at[index_max_dec, 'date']
    date_dec = date_dec.date()
    print("\nConfirmed")
    print("Day : ", date_conf)
    print("Count",marchToSept1_Confirmed['dl'].max())
    print("\nRecovered")
    print("Day : ", date_rec)
    print("Count",marchToSept1_Recovered['dl'].max())
    print("\nDeceased")
    print("Day : ", date_dec)
    print("Count",marchToSept1_Deceased['dl'].max())


# seventh Part


def Q1_7(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    marchToSept1_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    marchToSept1_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    marchToSept1_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <= end_date)]

    # answer 1_7
    for s in state1:
        sum_conf = marchToSept1_Confirmed[s].sum()
        sum_rec = marchToSept1_Recovered[s].sum()
        sum_dec = marchToSept1_Deceased[s].sum()
        active = sum_conf - (sum_rec + sum_dec)
        if(active<0):
        	print(" '{0}' :: 0 ".format(s))
        else:
        	print(" '{0}' :: {1} ".format(s,active))


       


# second 2 a part


def Q2_1(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)

    # Answer 2_1

    graph_confirm = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <=end_date)]
    x_value_c = graph_confirm['date'].to_numpy()
    # print(x_value)
    y_value_c = graph_confirm['tt'].tolist()
    plt.title('Confirmed Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Number of total cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    plt.plot(x_value_c, y_value_c)
    plt.fill_between(x_value_c, 0, y_value_c)
    plt.savefig('fig_1.jpg')
    plt.show()
  

    # Cummullative
    y_c = graph_confirm['tt'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_c)):
        temp += y_c[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Confirmed Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Confirmed cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Confirmed Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_2.jpg')
    plt.show()


    # Recovered
    graph_recover = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    x_value_r = graph_recover['date'].to_numpy()
    # print(x_value)
    y_value_r = graph_recover['tt'].to_numpy()
    plt.title('Recovered Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Total Recovered Cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot_date(x_value_r, y_value_r ,label="Scatter plot")
    plt.plot(x_value_r, y_value_r)
    plt.fill_between(x_value_r, 0, y_value_r)
    plt.savefig('fig_3.jpg')
    plt.show()


    # cummulative

    # Cummullative
    y_r = graph_recover['tt'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_r)):
        temp += y_r[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Recover Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Recover cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Recovered Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_4.jpg')
    plt.show()
    

    # Deceased
    graph_deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <=end_date)]
    x_value_d = graph_deceased['date'].to_numpy()
    # print(x_value)
    y_value_d = graph_deceased['tt'].to_numpy()
    plt.title('deceased Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Number of total Deceased')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    plt.plot(x_value_d, y_value_d)
    # plt.plot_date(x_value_d, y_value_d ,label="Scatter plot")
    plt.fill_between(x_value_d, 0, y_value_d)
    plt.savefig('fig_5.jpg')
    plt.show()

    # Cummullative
    y_d = graph_deceased['tt'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_d)):
        temp += y_d[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Deceased Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Deceased cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Deceased Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_6.jpg')
    plt.show()


#  Q2 b part

def Q2_2(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    # Answer 2_2
    from datetime import date, timedelta
    import matplotlib.dates as mdates
    graph_confirm = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    x_value_c = graph_confirm['date'].to_numpy()
    # print(x_value)
    y_value_c = graph_confirm['dl'].tolist()
    plt.title('Confirmed Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Number of total cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    plt.plot(x_value_c, y_value_c)
    # plt.plot_date(x_value_c, y_value_c ,label="Scatter plot")
    plt.fill_between(x_value_c, 0, y_value_c)
    plt.savefig('fig_7.jpg')
    plt.show()

    # cummulative
    # Cummullative
    y_c = graph_confirm['dl'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_c)):
        temp += y_c[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Confirmed Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Confirmed cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Confirmed Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_8.jpg')
    plt.show()

    # Recovered
    graph_recover = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    x_value_r = graph_recover['date'].to_numpy()
    # print(x_value)
    y_value_r = graph_recover['dl'].to_numpy()
    plt.title('Recovered Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Total Recovered Cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    plt.plot(x_value_r, y_value_r)
    # plt.plot_date(x_value_r, y_value_r ,label="Scatter plot")
    plt.fill_between(x_value_r, 0, y_value_r)
    plt.savefig('fig_9.jpg')
    plt.show()

    # cummulative
    # Cummullative
    y_r = graph_recover['dl'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_r)):
        temp += y_r[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Recover Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Recover cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Recovered Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_10.jpg')
    plt.show()

    # Deceased
    graph_deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <=end_date)]
    x_value_d = graph_deceased['date'].to_numpy()
    # print(x_value)
    y_value_d = graph_deceased['dl'].to_numpy()
    plt.title('deceased Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Number of total Deceased')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    plt.plot(x_value_d, y_value_d)
    plt.fill_between(x_value_d, 0, y_value_d)
    plt.savefig('fig_11.jpg')

    plt.show()

    # cummulative
    # Cummullative
    y_d = graph_deceased['dl'].tolist()
    y_graph_value = []
    temp = 0
    for i in range(len(y_d)):
        temp += y_d[i]
        y_graph_value.append(temp)
    # print(x_value_c)
    plt.title('Decaesed Case Trend (cummulative)')
    plt.xlabel('Date')
    plt.ylabel('Deceased cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Decaesed Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_12.jpg')
    plt.show()


#  Q2 c part

def Q2_3(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)
    # Answer 2-3 Using Commulative
    from datetime import date, timedelta
    import matplotlib.dates as mdates
    g_Confirmed = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    g_Recovered = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    g_Deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <=end_date)]
    x_value_c = g_Confirmed['date'].to_numpy()
    # print(x_value)
    y_c = g_Confirmed['tt'].tolist()
    y_r = g_Recovered['tt'].tolist()
    y_d = g_Deceased['tt'].tolist()
    y_value = []
    y_graph_value = []
    # print(y_c)
    for (a, b, c) in zip(y_c, y_r, y_d):
        z = (a - (b + c))
        if (z < 0):
            y_value.append(0)  # not sure why some value is zero
        else:
            y_value.append(z)
    y_value = np.array(y_value)
    temp = 0
    for i in range(len(y_value)):
        temp += y_value[i]
        y_graph_value.append(temp)
    # print(y_graph_value)
    # print(x_value_c)
    plt.title('Active Case Trend')
    plt.xlabel('Date')
    plt.ylabel('Active cases')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=20))
    plt.xticks(rotation=30)
    # plt.plot(x_value_c,y_value)
    plt.fill_between(x_value_c, 0, y_graph_value, label='Active Cases', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_13.jpg')
    plt.show()


def Q3(json_file_path, start_date, end_date):
    dataframe, filterStatusConfirmed, filterStatusRecovered, filterStatusDeceased, arr1, union_terr1, state1 = dataPre(
        json_file_path, start_date, end_date)

    graph_confirm = filterStatusConfirmed[
        (filterStatusConfirmed['date'] >= start_date) & (filterStatusConfirmed['date'] <= end_date)]
    x_value_c = graph_confirm['date'].to_numpy()
    # print(x_value)
    y_value_c = graph_confirm['dl'].to_numpy()
    ss=datetime.strptime(start_date, '%Y-%m-%d').date()
    yy=datetime.strptime(end_date, '%Y-%m-%d').date()
    delta = yy - ss
    dayy = delta.days + 1
    x_value_c = np.arange(1, dayy + 1)
    # print(len(x_value))
    # print(len(y_value_c))
    m_x, m_y = np.mean(x_value_c), np.mean(y_value_c)
    n = np.size(x_value_c)
    SS_xy = np.sum(y_value_c * x_value_c) - n * m_y * m_x
    SS_xx = np.sum(x_value_c * x_value_c) - n * m_x * m_x

    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    b = b_0, b_1
    plt.title('Linear Regression for Confirmed Case')
    plt.scatter(x_value_c, y_value_c, label='Scatter', color="m", marker="o", s=30)
    y_pred = b[0] + b[1] * x_value_c
    plt.xlabel('Days')
    plt.ylabel('Confirmed Case')
    plt.legend()
    plt.plot(x_value_c, y_pred, color="g", label='Linear Regression', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_14.jpg')
    plt.show()
    confirmed_intercept=b[0]
    confirmed_slope=b[1]
    # print(b[0])
    # print(b[1])
    #print("Intercept = {0} and slope is {1}".format(b[0], b[1]))

    # for Recovered :
    graph_recover = filterStatusRecovered[
        (filterStatusRecovered['date'] >= start_date) & (filterStatusRecovered['date'] <= end_date)]
    x_value_r = graph_recover['date'].to_numpy()
    y_value_r = graph_recover['dl'].to_numpy()

    ss=datetime.strptime(start_date, '%Y-%m-%d').date()
    yy=datetime.strptime(end_date, '%Y-%m-%d').date()
    delta = yy - ss
    dayy = delta.days + 1
    x_value_r = np.arange(1, dayy + 1)
    m_x, m_y = np.mean(x_value_r), np.mean(y_value_r)
    n = np.size(x_value_r)
    SS_xy = np.sum(y_value_r * x_value_r) - n * m_y * m_x
    SS_xx = np.sum(x_value_r * x_value_r) - n * m_x * m_x

    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    b = b_0, b_1
    plt.title('Linear Regression for Recovered Case')
    plt.scatter(x_value_r, y_value_r, label='Scatter', color="m", marker="o", s=30)
    y_pred = b[0] + b[1] * x_value_r
    plt.xlabel('Days')
    plt.ylabel('Recovered Case')
    plt.legend()
    plt.plot(x_value_r, y_pred, color="g", label='Linear Regression', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_15.jpg')
    plt.show()
    recovered_intercept= b[0]
    recovered_slope =b[1]
    # print(b[0])
    # print(b[1])
    #print("Intercept = {0} and slope is {1}".format(b[0], b[1]))

    # Deceased

    graph_deceased = filterStatusDeceased[
        (filterStatusDeceased['date'] >= start_date) & (filterStatusDeceased['date'] <= end_date)]
    x_value_d = graph_deceased['date'].to_numpy()
    # print(x_value)
    y_value_d = graph_deceased['dl'].to_numpy()

    ss=datetime.strptime(start_date, '%Y-%m-%d').date()
    yy=datetime.strptime(end_date, '%Y-%m-%d').date()
    delta = yy - ss
    dayy = delta.days + 1
    x_value_d = np.arange(1, dayy + 1)
    m_x, m_y = np.mean(x_value_d), np.mean(y_value_d)
    n = np.size(x_value_d)
    SS_xy = np.sum(y_value_d * x_value_d) - n * m_y * m_x
    SS_xx = np.sum(x_value_d * x_value_d) - n * m_x * m_x

    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    b = b_0, b_1
    plt.title('Linear Regression for Deceased Case')
    plt.scatter(x_value_d, y_value_d, label='Scatter', color="m", marker="o", s=30)
    y_pred = b[0] + b[1] * x_value_d
    plt.xlabel('Days')
    plt.ylabel('Deceased Case')
    plt.legend()
    plt.plot(x_value_d, y_pred, color="g", label='Linear Regression', linestyle='-', linewidth=2)
    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
    plt.savefig('fig_16.jpg')
    plt.show()
    deceased_intercept = b[0]
    deceased_slope =b[1]
    # print(b[0])
    # print(b[1])
    #print("Intercept = {0} and slope is {1}".format(b[0], b[1]))
    return confirmed_intercept, confirmed_slope, recovered_intercept, recovered_slope, deceased_intercept, deceased_slope


    # Press the green button in the gutter to run the script.


if __name__ == "__main__":
    print("PhD19006")
    print("MT20029")
    if (len(sys.argv) == 4):
        start_date = ""
        end_date = ""
        json_file_path = ""
        json_file_path = sys.argv[1]
        if os.path.exists(json_file_path):
            start_date = sys.argv[2]
            end_date = sys.argv[3]

            try:
                start_date1 = datetime.strptime(start_date, '%Y-%m-%d').date()
            except ValueError as ve:
                print('ValueError Raised:', ve)
            try:
                end_date1 = datetime.strptime(end_date, '%Y-%m-%d').date()
            except ValueError as ve:
                print('ValueError Raised:', ve)
            if (start_date1 < end_date1):
                Q1_1(json_file_path, start_date, end_date)
                Q1_2(json_file_path, start_date, end_date)
                Q1_3(json_file_path, start_date, end_date)
                Q1_4(json_file_path, start_date, end_date)
                Q1_5(json_file_path, start_date, end_date)
                Q1_6(json_file_path, start_date, end_date)
                Q1_7(json_file_path, start_date, end_date)
                Q2_1(json_file_path, start_date, end_date)
                Q2_2(json_file_path, start_date, end_date)
                Q2_3(json_file_path, start_date, end_date)
                Q3(json_file_path, start_date, end_date)
            else:
                print("You have entered the dates in wrong order\nStart date cannot be greater than end date\n")
                print("First enter Start date and then End Date in YY-MM-DD format")

        else:
            print("File path not exit")
    else:
        print("YOu forgot the Argument")

# print(json_file_path)
# print(start_date)
# print(end_date)

# See PyCharm help at https://www.jetbrains.com/help/pycharm/